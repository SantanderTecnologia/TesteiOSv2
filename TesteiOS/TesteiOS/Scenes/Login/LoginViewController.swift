//
//  LoginViewController.swift
//  TesteiOS
//
//  Created by Fernando Gomes on 14/06/19.
//  Copyright (c) 2019 Fernando Gomes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol LoginDisplayLogic: class {
    func displayStatmentView()
    func displayErrorMessage(title: String, message: String)
    func showLoading()
    func hideLoading()
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    func showLoading() {
        loginButton.isEnabled = false
        loadingAnimation.startAnimating()
    }
    
    func hideLoading() {
        loginButton.isEnabled = true
        loadingAnimation.stopAnimating()
    }
    
    func displayErrorMessage(title: String, message: String) {
        hideLoading()
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Try again", style: .default, handler: nil))
        present(alert, animated: true)
    }
    
    func displayStatmentView() {
        router?.goToStatement()
    }
    
    

  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
  var repository: UserRepository?
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    let repository = UserRepository.shared
    viewController.interactor = interactor
    viewController.router = router
    viewController.repository = repository
    interactor.presenter = presenter
    interactor.repository = repository
    presenter.viewController = viewController
    presenter.repository = repository
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    @IBOutlet weak var loginTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBAction func loginAction(_ sender: UIButton) {
        doLogin()
    }
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var loadingAnimation: NVActivityIndicatorView!
    
    override func viewDidLoad()
  {
    super.viewDidLoad()
    view.endEditing(true)
    loginButton.layer.cornerRadius = 4.0
  }
  

  
  func doLogin() {
    showLoading()
    let request = Login.doLogin.Request(user: loginTextField.text!, password: passwordTextField.text!)
    interactor?.doLogin(request: request)
  }
}
