//
//  StatementInteractor.swift
//  BankApp
//
//  Created by resource on 16/06/19.
//  Copyright (c) 2019 Gabriel Faustino. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementBusinessLogic {
    func getUser()
    func requestUserStatement()
}

protocol StatementDataStore {
    var user: Statement.User.ViewModel? { get set }
}

class StatementInteractor: StatementBusinessLogic, StatementDataStore {
    var user: Statement.User.ViewModel?
    var statement: Statement.Transactions.ViewModel?
    
    var presenter: StatementPresentationLogic?
    var worker: StatementWorker?
    
    func getUser() {
        guard let user = user else {
            presenter?.returnToLogin()
            return
        }
        presenter?.showUser(user)
    }
    
    func requestUserStatement() {
        guard let user = user else {
            presenter?.returnToLogin()
            return
        }
        worker?.getUserStatement(for: user.id, success: { response in
            let statements = Statement.Transactions.ViewModel(transationList: response.statementList.compactMap({
                Statement.Transactions.TransactionViewModel(from: $0)
            }))
            
            self.statement = statements
            self.presenter?.showStatements(statements)
        }, failure: { error in
            self.statement = nil
            self.presenter?.showStatements(Statement.Transactions.ViewModel(transationList: []))
        })
    }
}
