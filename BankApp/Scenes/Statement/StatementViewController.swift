//
//  StatementViewController.swift
//  BankApp
//
//  Created by resource on 16/06/19.
//  Copyright (c) 2019 Gabriel Faustino. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementDisplayLogic: class {
    func showUser(_ model: Statement.User.ViewModel)
    func refreshStatementTable(_ model: Statement.Transactions.ViewModel)
    func returnToLogin()
}

class StatementViewController: UITableViewController {
    var interactor: StatementBusinessLogic?
    var router: (NSObjectProtocol & StatementRoutingLogic & StatementDataPassing)?
    var statementTable: StatementTableController?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = StatementInteractor()
        let presenter = StatementPresenter()
        let router = StatementRouter()
        let worker = StatementWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let destination = segue.destination as? StatementTableController {
            destination.dataSource = self
            destination.register(nib: UINib(nibName: StatementCell.typeName, bundle: Bundle(for: StatementCell.self)), forCellWithReuseIdentifier: StatementCell.typeName)
            self.statementTable = destination
            return
        }
        
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    private var displayerTransactions: [Statement.Transactions.TransactionViewModel]?
    
    @IBOutlet weak var username: UIBarButtonItem!
    @IBOutlet weak var bankAccountNumber: UILabel!
    @IBOutlet weak var balance: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        interactor?.getUser()
        interactor?.requestUserStatement()
    }
    
    private func setupView() {
        let font = UIFont.systemFont(ofSize: 25)
        username.setTitleTextAttributes([NSAttributedString.Key.font: font], for: .normal)
        navigationController?.navigationBar.barStyle = .black
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.section == 0 {
            return 140
        }
        var tableHeight = view.bounds.height - 140 - (navigationController?.navigationBar.frame.height ?? 0)
        tableHeight = tableHeight > 80 * 8 ? tableHeight : 80 * 8
        
        return tableHeight
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        if section == 1 {
            let view = UIView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 28))
            view.backgroundColor = #colorLiteral(red: 0.9803921569, green: 0.9803921569, blue: 0.9803921569, alpha: 1)
            
            let label = UILabel(frame: CGRect(x: 16, y: 0, width: self.view.frame.width - 16, height: 28))
            label.text = "Recentes"
            label.font = UIFont.systemFont(ofSize: 17)
            view.addSubview(label)
            
            return view
        }
        return UIView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    // MARK: Do something
    @IBAction func didTouchLogout(_ sender: Any) {
        close()
    }
}

extension StatementViewController: StatementDisplayLogic {
    func showUser(_ model: Statement.User.ViewModel) {
        username.title = model.name
        bankAccountNumber.text = "\(model.bankAccount) / \(model.agency)"
        balance.text = String(format: "R$ %.2f", model.balance)
    }
    
    func refreshStatementTable(_ model: Statement.Transactions.ViewModel) {
        displayerTransactions = model.transationList
        statementTable?.reloadData()
    }
    
    func returnToLogin() {
        close()
    }
}

extension StatementViewController: StatementTableDataSource {
    func statementTableDataSource(_ statementTable: StatementTableController, numberOfRowsInSection section: Int) -> Int {
        return displayerTransactions?.count ?? 0
    }
    
    func planOptionCollection(_ statementTable: StatementTableController, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = statementTable.dequeueReusableCell(withReuseIdentifier: StatementCell.typeName, for: indexPath) as? StatementCell else { return UITableViewCell() }
        
        if displayerTransactions?.count ?? 0 < (indexPath.row + 1) {
            return UITableViewCell()
        }
        guard let transaction = displayerTransactions?[indexPath.row]  else { return UITableViewCell() }
        
        cell.setup(from: transaction)
        return cell
    }
}
