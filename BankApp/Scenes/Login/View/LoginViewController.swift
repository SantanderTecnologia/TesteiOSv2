//
//  LoginViewController.swift
//  BankApp
//
//  Created by resource on 16/06/19.
//  Copyright (c) 2019 Gabriel Faustino. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class{
    func showPersistedUser(_ username: String?)
    func displayAlert(_ alert: UIAlertController)
    func goToStatement()
}

class LoginViewController: UIViewController{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        let worker = LoginWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: @IBOutlet
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var username: UITextField!
    @IBOutlet weak var password: UITextField!
    
    @IBOutlet weak var inputCenterYConstraint: NSLayoutConstraint!
    // MARK: View lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        setupView()
        
        NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillShow(_:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillHide(_:)), name: UIResponder.keyboardWillHideNotification, object: nil)
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard)))
    }
    
    @objc func keyboardWillShow(_ notification: NSNotification){
        guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        if ((self.view.bounds.height / 2) - 70) < keyboardFrame.cgRectValue.height {
            UIView.animate(withDuration: 0.2) {
                self.inputCenterYConstraint.constant = -(keyboardFrame.cgRectValue.height / 3)
                self.view.layoutIfNeeded()
            }
        }
    }
    
    @objc func keyboardWillHide(_ notification: NSNotification){
        UIView.animate(withDuration: 0.2) {
            self.inputCenterYConstraint.constant = 0
            self.view.layoutIfNeeded()
        }
    }
    
    @objc func dismissKeyboard(){
        view.endEditing(true)
    }
    
    private func setupView() {
        loginButton.layer.cornerRadius = 4
        loginButton.layer.shadowOpacity = 0.3
        loginButton.layer.shadowRadius = 6
        loginButton.layer.shadowOffset = CGSize(width: 0, height: 3)
        loginButton.layer.shadowColor = #colorLiteral(red: 0.231372549, green: 0.2823529412, blue: 0.9333333333, alpha: 1)
        
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        navigationController?.navigationBar.shadowImage = UIImage()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        interactor?.getPersistedUser()
        navigationController?.setNavigationBarHidden(true, animated: true)
    }
    
    @IBAction func didTouchLogin(_ sender: Any) {
        let login = Login.User.Request(user: username.text, password: password.text)
        loginButton.isEnabled = false
        interactor?.callUserLogin(with: login)
    }
}

extension LoginViewController: LoginDisplayLogic {
    func showPersistedUser(_ username: String?) {
        self.username.text = username ?? self.username.text
    }
    
    func displayAlert(_ alert: UIAlertController) {
        loginButton.isEnabled = true
        present(alert, animated: true, completion: nil)
    }
    
    func goToStatement() {
        loginButton.isEnabled = true
        router?.routeToStatement(segue: nil)
        username.text = ""
        password.text = ""
    }
}
