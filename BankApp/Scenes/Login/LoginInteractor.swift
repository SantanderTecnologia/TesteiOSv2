//
//  LoginInteractor.swift
//  BankApp
//
//  Created by resource on 16/06/19.
//  Copyright (c) 2019 Gabriel Faustino. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

protocol LoginBusinessLogic{
    func callUserLogin(with model: Login.User.Request)
    func getPersistedUser()
}

protocol LoginDataStore{
    var user: Statement.User.ViewModel? { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore{
    var user: Statement.User.ViewModel?
    
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    
    func callUserLogin(with model: Login.User.Request) {
        if model.user == nil || model.password == nil {
            self.presenter?.showErrorOnLogin("Por favor preencha todos os campos", isBadInput: true)
            return
        }
        
        if model.password!.range(of: "^(?=.*[A-Z])(?=.*[@$!%*#?&])(?=.*[A-Za-z\\d])[A-Za-z\\d@$!%*#?&]{3,}$",
                                 options: .regularExpression) != nil {
            self.presenter?.showErrorOnLogin("Por favor digite uma senha que contenha um digito maiusculo, um caractere especial e um caractere alfanumérico", isBadInput: true)
        }
        
        worker?.loginUser(model, success: { loginData in
            if let error = loginData.loginError {
                self.presenter?.showErrorOnLogin(error.message, isBadInput: false)
                return
            }
            
            guard let userData = loginData.userAccount else {
                self.presenter?.showErrorOnLogin("Houve um problema ao obter as informações do seu login", isBadInput: false)
                return
            }
            
            self.user = Statement.User.ViewModel(from: userData)
            self.worker?.setUserToPersistence((model.user)!)
            self.presenter?.goToStatement()
        }, failure: { error in
            self.presenter?.showErrorOnLogin(error.localizedDescription, isBadInput: false)
        })
    }
    
    func getPersistedUser() {
        presenter?.showPersistedUser(worker?.getUserPersisted())
    }
}
