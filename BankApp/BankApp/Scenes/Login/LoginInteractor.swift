//
//  LoginInteractor.swift
//  BankApp
//
//  Created by Joni Campos on 19/09/19.
//  Copyright (c) 2019 Joni Campos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// Para teste
//var usuarioID : Int = 0
//var usuarioNome: String = ""
//var usuarioConta: String = ""
//var usuarioAgencia: String = ""
//var usuarioSaldo : Double = 0.0


protocol LoginBusinessLogic
{
    func login(request: Login.Something.Request)
}

protocol LoginDataStore
{
    //var name: String { get set }
    var user: Login.Something.User! {get set}
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var user: Login.Something.User!
    
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    //Para fazer a chamada da API de login
    func login(request: Login.Something.Request)
    {
        
        if tester {
        
        let mockLogin = MockLoginServices()
        
        
        mockLogin.login(request.user!, password: request.password!) { (response: Login.Something.User?) in
            
            self.user = response
            
            self.presenter?.presentLogin()
        }

        }else{
            worker = LoginWorker(LoginService())
            
            // importante esta chamada utiliza o completion handler para aguardar retornar da chamada da API
            // no retorno coloca os dados do login na estrutura User dentro do Login.Something.User
            //somente depois é que chama o presenter para chamar a tela do extrato
            // chama o Login Worker para chamar a funcao login e retornar o response da API
            worker?.login(request.user!, password: request.password!)
            { (response: Login.Something.User?) in
                self.user = response
                
                self.saveUser(request: request)
                
            }
        }
        
        
        
        
       
        
    
        
        
        
        
    }
    
    
    
    //Função para salvar (de forma segura) o ultimo usuario logado
    private func saveUser(request: Login.Something.Request) {
        
        
    
        
        //Inicializa as variaveis de usuario e senha
        let usuario = request.user
        let senha = request.password
        
        //Remove usuario e senha se já tiver algum
        KeychainService.removePassword(service: "MyUser", account: "BankApp")
        KeychainService.removePassword(service: "MyPass", account: "BankApp")
        
        //Acrescenta um novo usuario e senha
        KeychainService.savePassword(service: "MyUser", account: "BankApp", data: usuario!)
        KeychainService.savePassword(service: "MyPass", account: "BankApp", data: senha!)
        
        //Envia para o presenter (para chamar a view novamente e chamar a função com a segue com o direcionamento)
        self.presenter?.presentLogin()
    
}

}
