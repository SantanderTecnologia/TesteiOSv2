//
//  StatementsViewController.swift
//  BankApp
//
//  Created by Joni Campos on 19/09/19.
//  Copyright (c) 2019 Joni Campos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

protocol StatementsDisplayLogic: class
{
    func showStatement(statements: Statement.StatementApi.Response)
}




class StatementsViewController: UIViewController, UITableViewDataSource,UITableViewDelegate,  StatementsDisplayLogic
{
    
   // Estrutura com o response do extrato
      var listStatements: [Login.Something.StatementUser] = []
    
    //Mark
    //campos do usuario
    
    
    @IBOutlet weak var nomeUsuarioLabel: UILabel!
    @IBOutlet weak var contaUsuarioLabel: UILabel!
    @IBOutlet weak var saldoUsuarioLabel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    
    func showStatement(statements: Statement.StatementApi.Response) {
        listStatements = statements.statement
        
        tableView.reloadData()
    }
    
    
    
    
    func getStatement()
    {
        
       // let idUsuario = usuarioID
        
        let request = Statement.StatementApi.Request(userId: (router?.dataStore?.user.userId)!)
        interactor?.getStatement(request: request)
    }
    
    //instancia dados do extrato
  
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listStatements.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
   
    //implementa o registro e loop da celula
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        //crie uma variavel com o identificador da celula
        
        let extrato = listStatements[indexPath.row]
        
        
        let celulaID = "celulaID"
        
        //executa o loop da Table View para a celula = celulaID
        //let celula = tableView.dequeueReusableCell(withIdentifier: celulaID, for: indexPath) as! statementCell
        
        let celula = tableView.dequeueReusableCell(withIdentifier: celulaID, for: indexPath) as! StatementCell
        
        
        //coloca os valores dos campos na celula
        
        celula.dataLabel.text = extrato.date.formataData()
        celula.pagamentoLabel.text = extrato.title
        celula.tipoContaLabel.text = extrato.desc
        celula.valorLabel.text = extrato.value.formataMoeda()
        
        
       
        
        
        return celula
    }
    
  var interactor: StatementsBusinessLogic?
  var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = StatementsInteractor()
    let presenter = StatementsPresenter()
    let router = StatementsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    //doSomething()
    
    
    //insere os dados do cliente logado na View
   
    
   
    if let user =  router?.dataStore?.user{
      nomeUsuarioLabel.text = user.name
      contaUsuarioLabel.text = "\(user.bankAccount) / \(user.agency)"
      saldoUsuarioLabel.text = user.balance.formataMoeda()
    }
    
//    nomeUsuarioLabel.text = usuarioNome
//    contaUsuarioLabel.text = "\(usuarioConta) / \(usuarioAgencia)"
//    saldoUsuarioLabel.text = usuarioSaldo.formataMoeda()
//
    
    
    tableView.separatorStyle = .none
    tableView.reloadData()
    
    //Call API do extrato
    getStatement()
  
    
  }
  
    @IBAction func logoutButton(_ sender: Any) {
        performSegue(withIdentifier: "Segue2Login", sender: nil)
        
    }
    
}
