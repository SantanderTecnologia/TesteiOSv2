//
//  ExtractViewController.swift
//  TesteSantander
//
//  Created by Hugo Abolis Jordao on 13/06/19.
//  Copyright (c) 2019 Hugo Abolis Jordao. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExtractDisplayLogic: class
{
    func displayStatementList(viewModel: Extract.Fetch.ViewModel)
    func displayError(errorMessage: String)
    func setUserData(userName: String, userAccount: String, userBalance: String)
}

class ExtractViewController: UIViewController, ExtractDisplayLogic
{
    var interactor: ExtractBusinessLogic?
    var router: (NSObjectProtocol & ExtractRoutingLogic & ExtractDataPassing)?
    var statementList: [Extract.Fetch.StatementItem]?
    
    @IBOutlet weak var userNameLabel: UILabel!
    @IBOutlet weak var userAccountLabel: UILabel!
    @IBOutlet weak var userBalance: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var logoutButton: UIButton!
    
    @IBAction func logoutButton(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
        
    }
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ExtractInteractor()
        let presenter = ExtractPresenter()
        let router = ExtractRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.register(UINib(nibName: "ExtractTableViewCell", bundle: nil), forCellReuseIdentifier: "extractTableViewCell")
        interactor?.getStatementList()
        interactor?.setUserData()
    }
    
    func setUserData(userName: String, userAccount: String, userBalance: String){
        userNameLabel.text = userName
        userAccountLabel.text = userAccount
        self.userBalance.text = userBalance
    }
    
    func displayStatementList(viewModel: Extract.Fetch.ViewModel)
    {
        statementList = viewModel.statementList
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayError(errorMessage: String){
        let alert = UIAlertController(title: "Erro", message: errorMessage, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { action in
        }))
        self.present(alert, animated: true, completion: nil)
    }
}

extension ExtractViewController: UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return statementList?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "extractTableViewCell", for: indexPath) as! ExtractTableViewCell
        
        if statementList != nil{
            if statementList!.count > indexPath.row{
                let item = statementList![indexPath.row]
                cell.configureCell(title: item.title ?? "", date: item.date ?? "", name: item.desc ?? "", amount: String(item.value ?? 0.0))
            }
        }
        
        return cell
    }
    
    
}
