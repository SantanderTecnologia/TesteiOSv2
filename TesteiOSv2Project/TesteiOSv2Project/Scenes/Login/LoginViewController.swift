//
//  LoginViewController.swift
//  TesteiOSv2Project
//
//  Created by Andrey on 11/06/20.
//  Copyright (c) 2020 Andrey Matos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displayBalanceScreen()
    func displayAlertError(message: String)
    func fillCurrentCredentials(userCredentials: UserCredentials)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = Selector("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        view.addGestureRecognizer(UITapGestureRecognizer(target: self,
                                                         action: #selector(didTapBody(_:))))
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        loginUIButton.setTitle(buttonLoginTitle, for: .normal)
        activityIndicator.stopAnimating()
        interactor?.checkLastUser()
    }
    
    @IBOutlet weak var usernameTextField: MTextField!
    @IBOutlet weak var passwordTextField: MTextField!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var loginUIButton: MButton!
    
    private let buttonLoginTitle = "Login"
    private let balanceSegueIdentifier = "ShowBalance"
    
    
    @objc func didTapBody(_: UITapGestureRecognizer){
        view.endEditing(true)
    }
    
    private func fetchUser(username: String, password: String)
    {
        loginUIButton.setTitle("", for: .normal)
        activityIndicator.startAnimating()
        let request = Login.FetchUser.Request(credentials: UserCredentials(emailOrCPF: username,
                                                                           password: password))
        interactor?.fetchUserAccount(request: request)
    }
    
    func displayBalanceScreen(){
        performSegue(withIdentifier: balanceSegueIdentifier, sender: self)
    }
    
    @IBAction func didTapLoginButton(_ sender: Any) {
        fetchUser(username: usernameTextField.text ?? "", password: passwordTextField.text ?? "")
    }
    
    func displayAlertError(message: String){
        loginUIButton.setTitle(buttonLoginTitle, for: .normal)
        activityIndicator.stopAnimating()
        let alert = UIAlertController(title: "Error", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { _ in
            alert.dismiss(animated: false, completion: nil)
        }))
        present(alert, animated: true, completion: nil)
    }
    
    func fillCurrentCredentials(userCredentials: UserCredentials){
        usernameTextField.text = userCredentials.emailOrCPF
        passwordTextField.text = userCredentials.password
    }
}
