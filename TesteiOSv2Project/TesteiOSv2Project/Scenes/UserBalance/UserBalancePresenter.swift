//
//  UserBalancePresenter.swift
//  TesteiOSv2Project
//
//  Created by Andrey on 15/06/20.
//  Copyright (c) 2020 Andrey Matos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserBalancePresentationLogic
{
    func presentStatements(response: UserBalance.FetchStatements.Response)
    func presentUserInfo(userAccount: UserAccount)
    func logout()
}

class UserBalancePresenter: UserBalancePresentationLogic
{
    weak var viewController: UserBalanceDisplayLogic?
    let currencyFormatter: NumberFormatter = {
        let currencyFormatter = NumberFormatter()
        currencyFormatter.numberStyle = .currency
        currencyFormatter.locale = Locale(identifier: "pt_BR")
        return currencyFormatter
    }()
    
    // MARK: Do something
    
    func logout() {
        viewController?.navigateBack()
    }
    
    func presentUserInfo(userAccount: UserAccount) {
        let userInfo = generatePresentableUserInfo(userAccount: userAccount)
        viewController?.displayUserInfo(userInfo: userInfo)
    }
    
    func presentStatements(response: UserBalance.FetchStatements.Response)
    {
        let viewModel = generatePresentableStatements(statements: response.statements)
        viewController?.displayStatements(viewModel: viewModel)
    }
    
    private func generatePresentableUserInfo(userAccount: UserAccount) -> UserBalance.FetchStatements.ViewModel.DisplayedUser{
        var fullBankAccountNumber = ""
        if var agency = userAccount.agency,
            let account = userAccount.bankAccount{
            let dotIndex = agency.index(agency.startIndex, offsetBy: 2)
            agency.insert(".", at: dotIndex)
            let dashIndex = agency.index(agency.endIndex, offsetBy: -1)
            agency.insert("-", at: dashIndex)
            fullBankAccountNumber = "\(account) / \(agency)"
        }
        return UserBalance.FetchStatements.ViewModel.DisplayedUser(id: userAccount.userId ?? 0,
                                                                   name: userAccount.name ?? "",
                                                                   account: fullBankAccountNumber,
                                                                   balance: currencyFormatter.string(from: (userAccount.balance ?? 0.0) as NSNumber) ?? "")
    }
    
    private func generatePresentableStatements(statements: [Statement]) -> UserBalance.FetchStatements.ViewModel{
        var displayedStatements: [UserBalance.FetchStatements.ViewModel.DisplayedStatement] = []
        statements.forEach {
            if let title = $0.title,
                let desc = $0.desc,
                let date = $0.date,
                let val = $0.value {
                let dateParts = date.split(separator: "-")
                let dt = "\(dateParts[2])/\(dateParts[1])/\(dateParts[0])"
                displayedStatements.append(UserBalance.FetchStatements.ViewModel.DisplayedStatement(title: title,
                                                                                                    desc: desc,
                                                                                                    date: dt,
                                                                                                    value: currencyFormatter.string(from: val as NSNumber) ?? ""))
            }
        }
        return UserBalance.FetchStatements.ViewModel(displayedStatements: displayedStatements)
    }
}
