//
//  LoginWorkerTests.swift
//  TesteiOSv2Project
//
//  Created by Andrey on 11/06/20.
//  Copyright (c) 2020 Andrey Matos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2Project
import XCTest

class LoginWorkerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: LoginWorker!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupLoginWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupLoginWorker()
    {
        sut = LoginWorker(bankStore: BankAPI())
    }
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testInvalidLoginCredentials()
    {
        let expect = expectation(description: "Wait for fetchUserAccount() to return")
        var mError = Login.FetchUser.Response.Error()
        var userAcct: UserAccount?
        sut.fetchUserAccount(userCredentials: UserCredentials(emailOrCPF: "", password: "")) { (response, error) in
            if let error = response?.error{
                mError = error
            }
            userAcct = response?.userAccount
            expect.fulfill()
        }
        waitForExpectations(timeout: 2)
        XCTAssert(mError.code == 53 && mError.message == "Usu√°rio ou senha incorreta")
        XCTAssert(userAcct?.userId == nil &&
            userAcct?.agency == nil &&
            userAcct?.balance == nil &&
            userAcct?.name == nil &&
            userAcct?.bankAccount == nil)
    }
    
    func testValidLoginCredentials(){
        let expect = expectation(description: "Wait for fetchUserAccount() to return")
        var mError: Login.FetchUser.Response.Error?
        var userAcct = UserAccount()
        sut.fetchUserAccount(userCredentials: UserCredentials(emailOrCPF: "test_user", password: "Test@1")) { (response, error) in
            mError = response?.error
            if let acct = response?.userAccount{
                userAcct = acct
            }
            expect.fulfill()
        }
        waitForExpectations(timeout: 2)
        XCTAssert(mError?.code == nil && mError?.message == nil)
        XCTAssert(userAcct.userId != nil &&
            userAcct.agency != nil &&
            userAcct.balance != nil &&
            userAcct.name != nil &&
            userAcct.bankAccount != nil)
    }
}
