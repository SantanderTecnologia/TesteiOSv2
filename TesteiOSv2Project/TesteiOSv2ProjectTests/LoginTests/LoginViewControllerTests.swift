//
//  LoginViewControllerTests.swift
//  TesteiOSv2Project
//
//  Created by Andrey on 11/06/20.
//  Copyright (c) 2020 Andrey Matos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TesteiOSv2Project
import XCTest

class LoginViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: LoginViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupLoginViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupLoginViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "LoginViewController") as? LoginViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class LoginBusinessLogicSpy: LoginBusinessLogic
    {
        var fetchUserAccountCalled = false
        var checkLastUserCalled = false
        
        func checkLastUser() {
            checkLastUserCalled = true
        }
        
        
        func fetchUserAccount(request: Login.FetchUser.Request) {
            fetchUserAccountCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoSomethingWhenViewIsLoaded()
    {
        // Given
        let spy = LoginBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.checkLastUserCalled, "viewDidLoad() should ask the interactor to do check the last user")
    }

    func testDisplayCurrentUserCredentials()
    {
        // Given
//        let viewModel = Login.FetchUser.ViewModel()
        
        // When
        loadView()
        sut?.fillCurrentCredentials(userCredentials: UserCredentials(emailOrCPF: "asd", password: "asd@A1"))
        
        // Then
        XCTAssertEqual(sut.usernameTextField.text, "asd", "fillCurrentCredentials(userCredentials:) should update the username text field")
        XCTAssertEqual(sut.passwordTextField.text, "asd@A1", "fillCurrentCredentials(userCredentials:) should update the password text field")
    }
}
